const e=(e,t,i,r,h,l)=>{const s=l,o=h/2;e.beginPath(),e.lineTo(i,o),e.lineTo(t.width-i,o),e.bezierCurveTo(t.width-i/r,o,t.width-o,i/r,t.width-o,i),e.lineTo(t.width-o,t.height-i),e.bezierCurveTo(t.width-o,t.height-i/r,t.width-i/r,t.height-o,t.width-i,t.height-o),e.lineTo(i,t.height-o),e.bezierCurveTo(i/r,t.height-o,o,t.height-i/r,o,t.height-i),e.lineTo(o,i),e.bezierCurveTo(o,i/r,i/r,o,i,o),e.closePath(),h?(e.strokeStyle=s,e.lineWidth=h,e.stroke()):(e.fillStyle=s,e.fill())};if("undefined"!=typeof registerPaint){class t{static get contextOptions(){return{alpha:!0}}static get inputProperties(){return["--squircle-radius","--squircle-smooth","--squircle-outline","--squircle-fill","--squircle-ratio"]}paint(t,i,r){const h=r.get("--squircle-ratio"),l=parseFloat(h)?parseFloat(h):1.8,s=parseFloat(10*r.get("--squircle-smooth")),o=parseInt(r.get("--squircle-radius"),10)*l,a=parseFloat(r.get("--squircle-outline"),10),n=r.get("--squircle-fill").toString().replace(/\s/g,""),u=()=>void 0!==r.get("--squircle-smooth")[0]?0===s?1:s:10,g=()=>a||0,c=()=>n||"#f45";o<i.width/2&&o<i.height/2?e(t,i,o,u(),g(),c()):e(t,i,Math.min(i.width/2,i.height/2),u(),g(),c())}}registerPaint("squircle",t)}